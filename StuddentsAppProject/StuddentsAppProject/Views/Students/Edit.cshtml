@model StuddentsAppProject.Models.Student

@{
    ViewData["Title"] = "Edit student";
}

<h1>Edit</h1>

<h4>Student</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="BirthDate" class="control-label"></label>
                <input asp-for="BirthDate" class="form-control" />
                <span asp-validation-for="BirthDate" class="text-danger"></span>                       
            </div>

            <div class="form-group">
                <label asp-for="JMBG" class="control-label"></label>
                <input asp-for="JMBG" class="form-control" />
                <span asp-validation-for="JMBG" class="text-danger"></span>
            </div>

            <div class="form-group my-3">
                <input type="submit" id="submitButton" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="mt-2">
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.getElementById("submitButton").addEventListener("click", function () {

            let birthDateValue = document.getElementById("BirthDate").value;
            let birthDate = birthDateValue ? new Date(birthDateValue).toISOString() : null;

            let studentData = {
                id: document.getElementById("Id").value,
                firstName: document.getElementById("FirstName").value,
                lastName: document.getElementById("LastName").value,
                birthDate: birthDate,
                jmbg: document.getElementById("JMBG").value,
            };

            console.log('payload is', studentData);

            axios.put('http://localhost:5159/api/student/' + studentData.id , studentData)
                .then(function (response) {
                    console.log("Student updated:", response.data);

                    // redirect to the list of all students.
                    window.location.href = '@Url.Action("Index", "Students")';
                })
                .catch(function (error) {

                    if (error.response) {
                        console.log("Server responded with status:", error.response.status);
                        console.log("Response data:", error.response.data);
                    } else if (error.request) {
                        console.log("No response received:", error.request);
                    } else {
                        console.log("Error setting up request:", error.message);
                    }

                    console.log("Error updating student:", error);

                    alert('Error updating student');
                });
        });
    </script>
}
